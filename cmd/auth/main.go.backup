package main

import (
	"context"
	"crypto/rsa"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"path/filepath"
	"syscall"
	"time"

	"github.com/gin-gonic/gin"
	"gorm.io/gorm"

	"brick-auth/pkg/config"
	"brick-auth/pkg/database"
	"brick-auth/pkg/httpapi"
	"brick-auth/pkg/models"
)

// Global variables
var (
	AppVersion    = "0.1.0-dev"
	BuildDateTime = "2025-07-10T13:00:00Z"
	db            *gorm.DB
	privateKey    *rsa.PrivateKey
	config        Config
)

// ensureDirectories creates necessary directories
func ensureDirectories() error {
	dirs := []string{
		filepath.Dir(config.Database.Path),
		filepath.Dir(config.Auth.PrivateKeyPath),
		"/var/log/brick-auth",
		"/var/lib/brick-auth",
	}

	for _, dir := range dirs {
		if err := os.MkdirAll(dir, 0755); err != nil {
			return fmt.Errorf("failed to create directory %s: %w", dir, err)
		}
	}
	return nil
}

// BuildInfo struct
type BuildInfo struct {
	Version        string `json:"version"`
	BuildDateTime  string `json:"buildDateTime"`
	BuildTimestamp int64  `json:"buildTimestamp"`
	Environment    string `json:"environment"`
	Service        string `json:"service"`
	Description    string `json:"description"`
}

// loadBuildInfo loads build information
func loadBuildInfo() *BuildInfo {
	return &BuildInfo{
		Version:        AppVersion,
		BuildDateTime:  BuildDateTime,
		BuildTimestamp: time.Now().Unix(),
		Environment:    "production",
		Service:        "brick-auth",
		Description:    "Brick Authentication Service",
	}
}

func main() {
	// Load configuration
	if err := loadConfig(); err != nil {
		log.Fatalf("Failed to load config: %v", err)
	}

	// Validate configuration
	if err := validateConfig(); err != nil {
		log.Fatalf("Invalid configuration: %v", err)
	}

	// Ensure directories exist
	if err := ensureDirectories(); err != nil {
		log.Fatalf("Failed to ensure directories: %v", err)
	}

	// Load private key
	if err := loadPrivateKey(); err != nil {
		log.Fatalf("Failed to load private key: %v", err)
	}

	// Initialize database
	if err := initDatabase(); err != nil {
		log.Fatalf("Failed to initialize database: %v", err)
	}

	// Start cleanup routine
	startCleanupRoutine()

	// Set Gin mode
	gin.SetMode(gin.ReleaseMode)

	// Create router
	r := gin.Default()

	// Add CORS middleware
	r.Use(func(c *gin.Context) {
		c.Header("Access-Control-Allow-Origin", "*")
		c.Header("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
		c.Header("Access-Control-Allow-Headers", "Origin, Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization")
		
		if c.Request.Method == "OPTIONS" {
			c.AbortWithStatus(204)
			return
		}
		
		c.Next()
	})

	// Add health check endpoint
	r.GET("/health", healthCheck)
	
	// Add version endpoint
	r.GET("/version", version)

	// Add authentication routes
	r.POST("/login", loginHandler)
	r.POST("/validate", validateTokenHandler)
	r.GET("/validate", validateTokenHandler)  // Also support GET for hub compatibility
	r.POST("/refresh", refreshTokenHandler)
	r.GET("/me", meHandler)

	// Add super-admin management routes
	admin := r.Group("/admin")
	admin.Use(func(c *gin.Context) {
		// Check if user is super-admin
		claims, err := getCurrentUserClaims(c)
		if err != nil {
			c.JSON(http.StatusUnauthorized, gin.H{"error": "Authentication required"})
			c.Abort()
			return
		}
		if claims.Role != "super-admin" {
			c.JSON(http.StatusForbidden, gin.H{"error": "Super-admin access required"})
			c.Abort()
			return
		}
		c.Next()
	})

	// User management
	admin.GET("/users", listUsersHandler)
	admin.POST("/users", createUserHandler)
	admin.PUT("/users/:id", updateUserHandler)
	admin.DELETE("/users/:id", deleteUserHandler)

	// Role management
	admin.GET("/roles", listRolesHandler)
	admin.POST("/roles", createRoleHandler)
	admin.PUT("/roles/:id", updateRoleHandler)
	admin.DELETE("/roles/:id", deleteRoleHandler)

	// Permission management
	admin.GET("/permissions", listPermissionsHandler)
	admin.POST("/permissions", createPermissionHandler)
	admin.PUT("/permissions/:id", updatePermissionHandler)
	admin.DELETE("/permissions/:id", deletePermissionHandler)

	// Create server with timeout configuration
	srv := &http.Server{
		Addr:         fmt.Sprintf("%s:%s", config.Server.Host, config.Server.Port),
		Handler:      r,
		ReadTimeout:  config.Server.ReadTimeout,
		WriteTimeout: config.Server.WriteTimeout,
		IdleTimeout:  config.Server.IdleTimeout,
	}

	// Start server in a goroutine
	go func() {
		log.Printf("Starting server on %s:%s", config.Server.Host, config.Server.Port)
		if err := srv.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			log.Fatalf("Failed to start server: %v", err)
		}
	}()

	// Wait for interrupt signal to gracefully shutdown the server
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit
	log.Println("Shutting down server...")

	// Give outstanding requests a deadline for completion
	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()

	if err := srv.Shutdown(ctx); err != nil {
		log.Fatal("Server forced to shutdown:", err)
	}

	log.Println("Server exiting")
} 